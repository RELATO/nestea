{
    // http:// eslint.org/docs/rules/

    "env": {
        "node": node,  // node global variables,
        "jasmine": true // jasmine global variables
    },
    "extends": "eslint:recommended",
    "globals": {
        "_": true,
    },

    "plugins": [
        "lodash3",
        "jasmine"
    ],

    "rules": {
        ////////// Possible Errors //////////
        "no-extra-parens": [2, "functions"], // disallow unnecessary parentheses
        "valid-jsdoc": 0, // Ensure JSDoc comments are valid
        "no-unexpected-multiline": 2, // Avoid code that looks like two expressions but is actually one

        ////////// Best Practices //////////

        "accessor-pairs": 1, // enforces getter/setter pairs in objects
        "block-scoped-var": 1, // treat var statements as if they were block scoped
        "complexity": 0, // specify the maximum cyclomatic complexity allowed in a program
        "consistent-return": 1, // require return statements to either always or never specify values
        "curly": 1, // specify curly brace conventions for all control statements
        "default-case": 1, // require default case in switch statements
        "dot-notation": 1, // encourages use of dot notation whenever possible
        "dot-location": [2, "property"], // enforces consistent newlines before or after dots
        "eqeqeq": 1, // require the use of === and !==
        "guard-for-in": 1, // make sure for-in loops have an if statement
        "no-alert": 1, // disallow the use of alert, confirm, and prompt
        "no-caller": 1, // disallow use of arguments.caller or arguments.callee
        "no-div-regex": 1, // disallow division operators explicitly at beginning of regular expression
        "no-else-return": 1, // disallow else after a return in an if
        "no-empty-label": 1, // disallow use of labels for anything other then loops and switches
        "no-eq-null": 1, // disallow comparisons to null without a type-checking operator
        "no-eval": 1, // disallow use of eval()
        "no-extend-native": 1, // disallow adding to native types
        "no-extra-bind": 1, // disallow unnecessary function binding
        "no-fallthrough": 1, // disallow fallthrough of case statements
        "no-floating-decimal": 1, // disallow the use of leading or trailing decimal points in numeric literals
        "no-implicit-coercion": 1, // Disallow the type conversion with shorter notations
        "no-implied-eval": 1, // disallow use of eval()-like methods
        "no-iterator": 1, // disallow usage of __iterator__ property
        "no-labels": 1, // disallow use of labeled statements
        "no-lone-blocks": 1, // disallow unnecessary nested blocks
        "no-loop-func": 1, // disallow creation of functions within loops
        "no-multi-spaces": 1, // disallow use of multiple spaces
        "no-multi-str": 1, // disallow use of multiline strings
        "no-native-reassign": 1, // disallow reassignments of native objects
        "no-new-func": 1, // disallow use of new operator for Function object
        "no-new-wrappers": 1, // disallows creating new instances of String, Number, and Boolean
        "no-new": 1, // disallow use of new operator when not part of the assignment or comparison
        "no-octal-escape": 1, // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \151";
        "no-octal": 1, // disallow use of octal literals
        // "no-param-reassign": [1, {"props": false }], // disallow reassignment of function parameters
        "no-process-env": 1, // disallow use of process.env
        "no-proto": 1, // disallow usage of __proto__ property
        "no-redeclare": 1, // disallow declaring the same variable more then once
        "no-return-assign": 1, // disallow use of assignment in return statement
        "no-script-url": 1, // disallow use of javascript: urls
        "no-self-compare": 1, // disallow comparisons where both sides are exactly the same
        "no-sequences": 1, // disallow use of comma operator
        "no-throw-literal": 1, // restrict what can be thrown as an exception
        "no-unused-expressions": 1, // disallow usage of expressions in statement position
        "no-void": 1, // disallow use of void operator
        "no-warning-comments": [1, {"terms": ["todo", "fixme"], "location": "start"}], // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME
        "no-with": 1, // disallow use of the with statement
        "radix": 1, // require use of the second argument for parseInt()
        "vars-on-top": 1, // requires to declare all vars on top of their containing scope
        "wrap-iife": [1, "outside"], // require immediate function invocation to be wrapped in parentheses
        "yoda": 1, // require or disallow Yoda conditions

        //////////Variables //////////

        "no-catch-shadow": 2, // disallow the catch clause parameter name being the same as a variable in the outer scope 
        "no-delete-var": 2, // disallow deletion of variables
        "no-label-var": 2, // disallow labels that share a name with a variable
        "no-shadow": 2, // disallow declaration of variables already declared in the outer scope
        "no-shadow-restricted-names": 2, // disallow shadowing of names such as arguments
        "no-undef": 2, // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undef-init": 2, // disallow use of undefined when initializing variables
        "no-undefined": 2, // disallow use of undefined variable
        "no-unused-vars": 2, // disallow declaration of variables that are not used in the code
        "no-use-before-define": [2, "nofunc"], // disallow use of variables before they are defined

        //////////Stylistic Issues //////////

        "array-bracket-spacing": [1, "never"], // enforce spacing inside array brackets
        "brace-style": 1, // enforce one true brace style
        "camelcase": [1, {"properties": "never"}], // require camel case names
        "comma-spacing": [1, {"before": false, "after": true }], // enforce spacing before and after comma
        "comma-style": [1, "last"], // enforce one true comma style
        "computed-property-spacing": [1, "never"], // require or disallow padding inside computed properties
        "consistent-this": 0, // enforces consistent naming when capturing the current execution context
        "eol-last": 1, // enforce newline at the end of file, with no multiple empty lines
        "func-style": [2, "declaration"], // enforces use of function declarations or expressions
        "id-length": 1, // Limit minimum and maximum length for identifiers
        "indent": [1, 4 , {"SwitchCase": 1}],
        "key-spacing": [1, {"beforeColon": false, "afterColon": true }], // enforces spacing between keys and values in object literal properties
        "lines-around-comment": [1, {"beforeBlockComment": true }], // enforces empty lines around comments
        "linebreak-style": [1, "unix"],
        "new-cap": 1, // require a capital letter for constructors
        "new-parens": 1, // disallow the omission of parentheses when invoking a constructor with no arguments
        "newline-after-var": 1, // allow/disallow an empty newline after var statement
        "no-array-constructor": 1, // disallow use of the Array constructor
        "no-continue": 1, // disallow use of the continue statement
        "no-lonely-if": 1, // disallow if as the only statement in an else block
        "no-mixed-spaces-and-tabs": 1, // disallow mixed spaces and tabs for indentation
        "no-multiple-empty-lines": [1, {max: 1}], // disallow multiple empty lines
        "no-nested-ternary": 1, // disallow nested ternary expressions
        "no-new-object": 1, // disallow use of the Object constructor
        "no-spaced-func": 1, // disallow space between function identifier and application
        "no-trailing-spaces": 1, // disallow trailing whitespace at the end of lines
        "no-underscore-dangle": 1, // disallow dangling underscores in identifiers
        "object-curly-spacing": [1, "never"],
        "one-var": [1, "always"], // allow just one var statement per function
        "operator-assignment": [1, "always"], // require assignment operator shorthand where possible or prohibit it entirely
        "operator-linebreak": 1, // enforce operators to be placed before or after line breaks
        "padded-blocks": [0, "never"], // enforce padding within blocks
        "quote-props": [1, "as-needed"], // require quotes around object literal property names
        "quotes": [1, "single"],
        "semi-spacing": 1, // enforce spacing before and after semicolons
        "semi": [1, "always"],
        "space-after-keywords": [1, "always"], // require a space after certain keywords
        "space-before-blocks": [1, "always"], // require or disallow space before blocks
        "space-before-function-paren": [1, "never"], // require or disallow space before function opening parenthesis
        "space-in-parens": 1, // require or disallow spaces inside parentheses
        "space-infix-ops": 1, // require spaces around operators
        "space-return-throw-case": 1, // require a space after return, throw, and case
        "space-unary-ops": 1, // require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
        "spaced-comment": 1, // require or disallow a space immediately following the // or /* in a comment
        "wrap-regex": 1, // require regex literals to be wrapped in parentheses
        "max-len": 0, // specify the maximum length of a line in your program

        // Lodash

        "lodash3/prop-shorthand": 1, // Prefer property shorthand syntax
        "lodash3/matches-prop-shorthand": 1, // Prefer matches property shorthand syntax
        "lodash3/preferred-alias": 1, // Preferred aliases
        "lodash3/prefer-chain": 1, // Prefer chain over nested lodash calls
        "lodash3/no-single-chain": 2, // Prevent chaining syntax for single method
        "lodash3/prefer-reject": 1, // Prefer _.reject over filter with !(expression) or x.prop1 !== value
        "lodash3/prefer-filter": 0, // Prefer _.filter over _.forEach with an if statement inside
        "lodash3/no-unnecessary-bind": 1, // Prefer passing thisArg over binding
        "lodash3/unwrap": 2, // Prevent chaining without evaluation via value() or non-chainable methods like max()
        "lodash3/prefer-compact": 2, // Prefer _.compact over _.filter for only truthy values
        "lodash3/no-double-unwrap": 2, // Do not use .value() on chains that have already ended (e.g. with max() or reduce())
        "lodash3/prefer-map": 0, // Prefer _.map over _.forEach with a push inside
        "lodash3/prefer-wrapper-method": 1, // Prefer using array and string methods in the chain and not the initial value
        "lodash3/prefer-invoke": 1, // Prefer using _.invoke over _.map with a method call inside
        "lodash3/prefer-thru": 1, // Prefer using _.prototype.thru in the chain and not call functions in the initial value, e.g. _(x).thru(f).map(g)...
        "lodash3/prefer-lodash-method": 1, // Prefer using Lodash collection methods (e.g. _.map) over native array methods.
        "lodash3/prefer-lodash-typecheck": 1, // Prefer using _.is* methods over typeof and instanceof checks when applicable

        // Jasmine
        "jasmine/no-focused-tests": 2, // No ddescribe/iit
        "jasmine/no-disabled-tests": 2, // No xdescribe/xit
        "jasmine/no-spec-dupes": 2, //No it within same describe with same description
        "jasmine/no-suite-dupes": 2 //No ddescribe with same description
    }
}